# Cálculo dos juros, sendo que precisa de parcelas pra isso
# Versão 0.1:  22/05/2025: versão feita sem muito conhecimento de Z

# variáveis globais para simplificar as chamadas âs funções
let Quantidade: 3
let Composto: true
let Periodo: 30.0
let Pagamentos: []
let Pesos: []

# calcula a somatória de Pesos[]
def getPesoTotal: func () {
    let acumulador: 0.0
    let indice: 0
    loop {
        if indice = Quantidade { break }
        acumulador: acumulador + Pesos[indice]
        indice: indice + 1
    }
    return acumulador
}

# calcula o acréscimo a partir dos juros e parcelas
def jurosParaAcrescimo: func (juros) {
    let pesoTotal: getPesoTotal()
    if Quantidade < 1 or Periodo <= 0.0 or pesoTotal <= 0.0 or juros <= 0.0 { return 0.0 }

    let acumulador: 0.0
    let indice: 0
    loop {
        if indice = Quantidade { break }
        if Composto {
            acumulador: acumulador + Pesos[indice] / (1.0 + juros / 100.0) ^ (Pagamentos[indice] / Periodo)
        } else {
            acumulador: acumulador + Pesos[indice] / (1.0 + juros / 100.0 * Pagamentos[indice] / Periodo)
        }
        indice: indice + 1
    }
    if acumulador <= 0.0 { return 0.0 }
    return (pesoTotal / acumulador - 1.0) * 100.0
}

# calcula os juros a partir do acréscimo e parcelas
def acrescimoParaJuros: func (acrescimo, precisao: 15, maxIteracoes: 100, maxJuros: 50.0) {
    let pesoTotal: getPesoTotal()
    if Quantidade < 1 or Periodo <= 0.0 or pesoTotal <= 0.0 or acrescimo <= 0.0 or precisao < 1 or maxIteracoes < 1 or maxJuros <= 0.0 { return 0.0 }

    let minJuros: 0.0
    let medJuros: maxJuros / 2.0
    let minDiferenca: 0.1 ^ precisao
    let indice: 0
    loop {
        if indice = maxIteracoes or maxJuros - minJuros < minDiferenca { return medJuros }
        if jurosParaAcrescimo(medJuros) < acrescimo {
            minJuros: medJuros
        } else {
            maxJuros: medJuros
        }
        medJuros: (minJuros + maxJuros) / 2.0
        indice: indice + 1
    }
}

# os arrays são inicializados dinamicamente
let indice: 0
loop {
    if indice = Quantidade { break }
    Pagamentos[indice]: Periodo * (indice + 1.0)
    Pesos[indice]: 1.0
    indice: indice + 1
}

# calcula e guarda os resultados das funções
let pesoTotal: getPesoTotal()
let acrescimoCalculado: jurosParaAcrescimo(3.0)
let jurosCalculado: acrescimoParaJuros(acrescimoCalculado)

# imprime os resultados
log("Peso total = " ++ pesoTotal)
log("Acréscimo = " ++ acrescimoCalculado)
log("Juros = " ++ jurosCalculado)