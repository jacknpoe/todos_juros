-- Cálculo dos juros, sendo que precisa de parcelas pra isso
-- Versão 0.1: 09/02/2025: versão feita sem muito conhecimento de NetRexx

import java.lang.Math  -- para usar java.lang.Math.pow, já que ** não aceita expoentes ponto flutuantes

class juros
    -- variáveis comuns para simplificar as chamadas
    Quantidade
    Composto
    Periodo
    Pagamentos = double[]
    Pesos = double[]

    -- construtor recebe valores para atributos escalares e aloca memória
    method juros(nQuantidade, nComposto, nPeriodo)
        Quantidade = nQuantidade; Composto = nComposto; Periodo = nPeriodo
        Pagamentos = double[Quantidade]; Pesos = double[Quantidade]

    -- calcula a somatória do array Pesos[]
    method getPesoTotal()
        acumulador = 0.0
        loop indice = 0 to Quantidade - 1
            acumulador = acumulador + Pesos[indice]
        end
        return acumulador

    -- calcula o acréscimo a partir dos juros e parcelas
    method jurosParaAcrescimo(juros)
        pesoTotal = getPesoTotal()
        if juros <= 0.0 | Quantidade < 1 | Periodo < 0.0 | pesoTotal <= 0.0 then return 0.0

        acumulador = 0.0
        loop indice = 0 to Quantidade - 1
            if Composto then acumulador = acumulador + Pesos[indice] / java.lang.Math.pow(1.0 + juros / 100.0, Pagamentos[indice] / Periodo)
                else acumulador = acumulador + Pesos[indice] / (1.0 + juros / 100.0 * Pagamentos[indice] / Periodo)
        end

        if acumulador <= 0.0 then return 0.0
        return (pesoTotal / acumulador - 1.0) * 100.0
    
    -- calcula os juros a partir do acréscimo e parcelas
    method acrescimoParaJuros(acrescimo, precisao, maxIteracoes, maxJuros)
        pesoTotal = getPesoTotal()
        if acrescimo <= 0.0 | Quantidade < 1 | Periodo < 0.0 | pesoTotal <= 0.0 | precisao < 1 | maxIteracoes < 1 | maxJuros <= 0.0 then return 0.0

        minJuros = 0.0; minDiferenca = java.lang.Math.pow(0.1, precisao)
        loop for maxIteracoes
            medJuros = (minJuros + maxJuros) / 2.0
            if (maxJuros - minJuros) < minDiferenca then return medJuros
            if jurosParaAcrescimo(medJuros) < acrescimo then minJuros = medJuros
                else maxJuros = medJuros
        end

        return medJuros

    -- main tem a característica de ser como qualquer main do tipo C
    method main(args=String[]) static
        -- cria um objeto oJuros da classe juros
        oJuros = juros(3, 1, 30.0)  -- 1 = TRUE

        -- inicializa os valores dos arrays
        loop indice = 0 to oJuros.Quantidade - 1
            oJuros.Pagamentos[indice] = 30.0 * (indice + 1.0)
            oJuros.Pesos[indice] = 1.0
        end

        -- calcula e guarda os retornos das funções
        pesoTotal = oJuros.getPesoTotal()
        acrescimoCalculado = oJuros.jurosParaAcrescimo(3.0)
        jurosCalculado = oJuros.acrescimoParaJuros(acrescimoCalculado, 15, 100, 50.0)

        -- imprime os resultados
        say "Peso total =" pesoTotal
        say "Acrescimo =" acrescimoCalculado
        say "Juros =" jurosCalculado